#!/bin/bash

# üè≠ Script para configurar credenciales de PRODUCCI√ìN en 1Password
# Separa las credenciales de test vs producci√≥n

set -e

echo "üè≠ Configurando Credenciales de PRODUCCI√ìN en 1Password"
echo "======================================================"

# Verificar que 1Password CLI est√© instalado
if ! command -v op &> /dev/null; then
    echo "‚ùå Error: 1Password CLI no est√° instalado"
    echo "üí° Instalar con: brew install --cask 1password/tap/1password-cli"
    exit 1
fi

# Verificar que est√© autenticado
if ! op account list &> /dev/null; then
    echo "üîë Iniciando sesi√≥n en 1Password..."
    eval $(op signin)
fi

echo ""
echo "üìù Vamos a crear entradas SEPARADAS para producci√≥n:"
echo "   1. NestJS Stripe API PROD"
echo "   2. NestJS Stripe Webhook PROD"
echo "   3. (Notion se mantiene igual - funciona para ambos ambientes)"
echo ""

# Funci√≥n para leer input de forma segura
read_secret() {
    local prompt="$1"
    local varname="$2"
    local prefix="$3"
    
    while true; do
        echo ""
        echo "$prompt"
        echo "üí° Opciones:"
        echo "   1. Escribir/pegar directamente"
        echo "   2. Saltar por ahora"
        echo -n "Selecciona una opci√≥n (1-2): "
        read choice
        
        case $choice in
            1)
                echo -n "Pega tu clave de PRODUCCI√ìN aqu√≠: "
                read value
                if [ -n "$value" ] && [[ "$value" == $prefix* ]]; then
                    eval "$varname='$value'"
                    echo "‚úÖ Clave de producci√≥n v√°lida recibida"
                    break
                elif [ -n "$value" ]; then
                    echo "‚ö†Ô∏è  Advertencia: La clave no tiene el prefijo esperado ($prefix)"
                    echo -n "¬øContinuar de todas formas? (y/N): "
                    read confirm
                    if [[ $confirm =~ ^[Yy]$ ]]; then
                        eval "$varname='$value'"
                        break
                    fi
                else
                    echo "‚ùå Valor vac√≠o, intenta de nuevo"
                fi
                ;;
            2)
                echo "‚è≠Ô∏è  Saltando configuraci√≥n de esta clave"
                eval "$varname=''"
                break
                ;;
            *)
                echo "‚ùå Opci√≥n no v√°lida"
                ;;
        esac
    done
}

# Funci√≥n para crear entrada en 1Password
create_item() {
    local title="$1"
    local username="$2"
    shift 2
    local fields=("$@")
    
    echo "üîê Creando entrada: $title"
    
    local cmd="op item create --category=login --title='$title'"
    
    if [ -n "$username" ]; then
        cmd="$cmd --username='$username'"
    fi
    
    for field in "${fields[@]}"; do
        if [[ $field =~ ^([^=]+)=(.+)$ ]]; then
            local field_def="${BASH_REMATCH[1]}"
            local field_value="${BASH_REMATCH[2]}"
            cmd="$cmd '${field_def}'='${field_value}'"
        fi
    done
    
    local output
    local exit_code
    output=$(eval "$cmd" 2>&1)
    exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Entrada '$title' creada exitosamente"
        return 0
    else
        echo "‚ùå Error creando entrada '$title'"
        if echo "$output" | grep -i "already exists" > /dev/null; then
            echo -n "üí° La entrada ya existe. ¬øQuieres actualizarla? (y/N): "
            read confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                local update_cmd=$(echo "$cmd" | sed 's/create/edit/')
                output=$(eval "$update_cmd" 2>&1)
                exit_code=$?
                if [ $exit_code -eq 0 ]; then
                    echo "‚úÖ Entrada '$title' actualizada exitosamente"
                    return 0
                else
                    echo "‚ùå Error actualizando entrada: $output"
                    return 1
                fi
            fi
        fi
        return 1
    fi
}

echo "1Ô∏è‚É£ Configurando Stripe API Key de PRODUCCI√ìN"
echo "=============================================="
echo "‚ö†Ô∏è  IMPORTANTE: Usa tu clave LIVE (sk_live_...) no TEST (sk_test_...)"
read_secret "Stripe SECRET KEY de PRODUCCI√ìN (sk_live_...)" STRIPE_SECRET_KEY_PROD "sk_live_"

if [ -n "$STRIPE_SECRET_KEY_PROD" ]; then
    if ! create_item "NestJS Stripe API PROD" "" "Secret Key[password]=$STRIPE_SECRET_KEY_PROD"; then
        echo "‚ö†Ô∏è  Continuando con la siguiente configuraci√≥n..."
    fi
else
    echo "‚è≠Ô∏è  Saltando configuraci√≥n de Stripe API Key de producci√≥n"
fi

echo ""
echo "2Ô∏è‚É£ Configurando Stripe Webhook de PRODUCCI√ìN"
echo "=============================================="
echo "‚ÑπÔ∏è  Debes crear el webhook en Stripe Dashboard DESPU√âS del deployment"
echo "üìç URL ser√°: https://nestjs-stripe-notion.fly.dev/webhook/stripe"
read_secret "Stripe Webhook Secret de PRODUCCI√ìN (whsec_...)" STRIPE_WEBHOOK_SECRET_PROD "whsec_"

if [ -n "$STRIPE_WEBHOOK_SECRET_PROD" ]; then
    if ! create_item "NestJS Stripe Webhook PROD" "" "Webhook Secret[password]=$STRIPE_WEBHOOK_SECRET_PROD"; then
        echo "‚ö†Ô∏è  Error creando entrada de webhook"
    fi
else
    echo "‚è≠Ô∏è  Saltando configuraci√≥n de Stripe Webhook de producci√≥n"
    echo "üí° Puedes configurarlo despu√©s del deployment"
fi

echo ""
echo "üéâ ¬°Configuraci√≥n de PRODUCCI√ìN completada!"
echo "============================================="
echo ""
echo "üìã Entradas creadas en 1Password:"
echo "   üß™ TEST:"
echo "      - NestJS Stripe API"
echo "      - NestJS Stripe Webhook" 
echo "   üè≠ PRODUCCI√ìN:"
echo "      - NestJS Stripe API PROD"
echo "      - NestJS Stripe Webhook PROD"
echo "   üìö COMPARTIDO:"
echo "      - NestJS Notion Integration"
echo "      - NestJS Notion Databases"
echo ""
echo "üîó Pr√≥ximos pasos:"
echo "   1. Ejecutar: pnpm run deploy"
echo "   2. Configurar webhook en Stripe Dashboard con URL de producci√≥n"
echo "   3. Actualizar webhook secret de producci√≥n en 1Password" 